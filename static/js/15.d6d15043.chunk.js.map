{"version":3,"sources":["views/Bonds/components/ExchangeCard.tsx","views/Bonds/components/ExchangeStat.tsx","views/Bonds/BondToken.tsx","views/Bonds/Bond.tsx"],"names":["StyledCardTitle","styled","div","props","theme","colors","primary","spacing","StyledCardActions","StyledDesc","span","tertiary","StyledCardContentInner","ExchangeCard","action","fromToken","toToken","priceDesc","onExchange","disabled","disabledDescription","useState","requestedApproval","setRequestedApproval","balance","useTokenBalance","useApproveTreasury","onApprove","isApproved","handleApprove","useCallback","a","console","error","useModal","DepositModal","max","onConfirm","tokenName","onPresentDeposit","token","toLocaleLowerCase","onClick","secondary","ExchangeStat","description","label","StyledBond","StyledCardWrapper","BondToken","account","useWallet","contract","useTreasury","bondBalance","QuoteToken","SBO","cashStat","useCashPriceInEstimatedTWAP","useBondStats","burnable","redeemable","handleBuyBonds","amount","buyBonds","handleRedeemBonds","redeemBonds","isBondRedeemable","useMemo","Number","isBondPurchasable","SDO","Math","floor","toNumber","Spacer","toFixed","getDisplayBalance","UnlockButton","mt","fullWidth","Wrapper","launchTime","Date","Bond","path","useRouteMatch","now","getTime","Page","Flex","as","size","mb","style","textAlign","exact","LaunchCountdown","deadline"],"mappings":"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","file":"static/js/15.d6d15043.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { useApproveTreasury } from 'hooks/useApprove'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport styled from 'styled-components'\r\nimport { Button, Card, useModal } from 'uikit'\r\nimport DepositModal from 'views/Farms/components/DepositModal'\r\nimport { CardLogo } from 'views/Home/Home'\r\n\r\ninterface ExchangeCardProps {\r\n  action: string\r\n  fromToken: QuoteToken\r\n  toToken: QuoteToken\r\n  priceDesc: string\r\n  onExchange: (amount: string) => void\r\n  disabled?: boolean\r\n  disabledDescription?: string\r\n}\r\n\r\nconst ExchangeCard: React.FC<ExchangeCardProps> = ({\r\n  action,\r\n  fromToken,\r\n  toToken,\r\n  priceDesc,\r\n  onExchange,\r\n  disabled = false,\r\n  disabledDescription,\r\n}) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const balance = useTokenBalance(fromToken)\r\n  const { onApprove, isApproved } = useApproveTreasury(fromToken)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={balance} onConfirm={onExchange} tokenName={fromToken} />)\r\n\r\n  return (\r\n    <Card>\r\n      <CardLogo token={toToken.toLocaleLowerCase()}>\r\n        <StyledCardContentInner>\r\n          <StyledCardTitle>{`${action} ${toToken}`}</StyledCardTitle>\r\n          <StyledDesc>{priceDesc}</StyledDesc>\r\n          <StyledCardActions>\r\n            {!isApproved && !disabled ? (\r\n              <Button disabled={requestedApproval} onClick={handleApprove}>\r\n                {`Approve ${fromToken}`}\r\n              </Button>\r\n            ) : (\r\n              <Button onClick={onPresentDeposit} disabled={disabled}>\r\n                {disabledDescription || action}\r\n              </Button>\r\n            )}\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardLogo>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StyledCardTitle = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  height: 64px;\r\n  justify-content: center;\r\n  margin-top: ${(props) => -props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[3]}px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledDesc = styled.span`\r\n  color: ${(props) => props.theme.colors.tertiary};\r\n`\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default ExchangeCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody } from 'uikit'\r\n\r\ninterface ExchangeStatProps {\r\n  description: string\r\n  label: string\r\n}\r\n\r\nconst ExchangeStat: React.FC<ExchangeStatProps> = ({ description, label }) => {\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <StyledCardContentInner>\r\n          <StyledCardTitle>{label}</StyledCardTitle>\r\n          <StyledDesc>{description}</StyledDesc>\r\n        </StyledCardContentInner>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StyledCardTitle = styled.div`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  margin-bottom: ${(props) => props.theme.spacing[2]}px;\r\n`\r\n\r\nconst StyledDesc = styled.span`\r\n  color: ${(props) => props.theme.colors.secondary};\r\n  text-align: center;\r\n`\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  padding: ${(props) => props.theme.spacing[2]}px;\r\n`\r\n\r\nexport default ExchangeStat\r\n","import React, { useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport Spacer from 'components/Spacer'\r\nimport { useBondStats, useCashPriceInEstimatedTWAP } from 'hooks/useExitBoardroom'\r\nimport { getDisplayBalance } from 'utils/formatBalance'\r\nimport { buyBonds, redeemBonds } from 'utils/callHelpers'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTreasury } from 'hooks/useContract'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport ExchangeCard from './components/ExchangeCard'\r\nimport ExchangeStat from './components/ExchangeStat'\r\n\r\nconst BondToken: React.FC<any> = () => {\r\n  const { account } = useWallet()\r\n  const contract = useTreasury()\r\n  const bondBalance = useTokenBalance(QuoteToken.SBO)\r\n  const cashStat = useCashPriceInEstimatedTWAP()\r\n  const [burnable, redeemable] = useBondStats()\r\n\r\n  const handleBuyBonds = useCallback(\r\n    async (amount: string) => {\r\n      if (!amount) return\r\n\r\n      await buyBonds(contract, amount, cashStat, account)\r\n    },\r\n    [cashStat, account, contract],\r\n  )\r\n\r\n  const handleRedeemBonds = useCallback(\r\n    async (amount: string) => {\r\n      if (!amount) return\r\n\r\n      await redeemBonds(contract, amount, cashStat, account)\r\n    },\r\n    [cashStat, account, contract],\r\n  )\r\n\r\n  const isBondRedeemable = useMemo(() => Number(cashStat) > 1.0 && Number(redeemable) > 0, [\r\n    cashStat,\r\n    redeemable,\r\n  ])\r\n  const isBondPurchasable = useMemo(() => Number(cashStat) < 1.0, [cashStat])\r\n  const description = useMemo(() => (isBondPurchasable ? 'Burnable Dollars' : 'Redeemable Bonds'), [isBondPurchasable])\r\n\r\n  return account ? (\r\n    <>\r\n      <StyledBond>\r\n        <StyledCardWrapper>\r\n          <ExchangeCard\r\n            action=\"Purchase\"\r\n            fromToken={QuoteToken.SDO}\r\n            toToken={QuoteToken.SBO}\r\n            priceDesc={\r\n              !isBondPurchasable\r\n                ? `${QuoteToken.SDO} is over peg`\r\n                : `${Math.floor(100 / cashStat.toNumber() - 100)}% return when ${QuoteToken.SDO} is over`\r\n            }\r\n            onExchange={handleBuyBonds}\r\n            disabled={!isBondPurchasable}\r\n          />\r\n        </StyledCardWrapper>\r\n        <Spacer />\r\n        <StyledCardWrapper>\r\n          <ExchangeStat\r\n            description={description}\r\n            label={isBondPurchasable ? burnable?.toFixed(3) : redeemable?.toFixed(3)}\r\n          />\r\n          <Spacer />\r\n          <ExchangeStat description=\"Last-Hour TWAP Price\" label={`💰 ${QuoteToken.SDO} = $${cashStat?.toFixed(3) || '-'}`} />\r\n        </StyledCardWrapper>\r\n        <Spacer />\r\n        <StyledCardWrapper>\r\n          <ExchangeCard\r\n            action=\"Redeem\"\r\n            fromToken={QuoteToken.SBO}\r\n            toToken={QuoteToken.SDO}\r\n            priceDesc={`${getDisplayBalance(bondBalance)} ${QuoteToken.SDO} Available`}\r\n            onExchange={handleRedeemBonds}\r\n            disabled={!isBondRedeemable}\r\n            disabledDescription={!isBondRedeemable ? `Enabled when ${QuoteToken.SDO} over peg` : 'Redeem'}\r\n          />\r\n        </StyledCardWrapper>\r\n      </StyledBond>\r\n    </>\r\n  ) : (\r\n    <UnlockButton mt=\"8px\" fullWidth />\r\n  )\r\n}\r\n\r\nconst StyledBond = styled.div`\r\n  display: flex;\r\n  width: 960px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`\r\n\r\nexport default BondToken\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Page from 'components/layout/Page'\r\nimport { Heading } from 'uikit'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport LaunchCountdown from 'components/LaunchCountdown'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport BondToken from './BondToken'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst launchTime = new Date(1621818673000)\r\n\r\nconst Bond: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n\r\n  const isLaunched = Date.now() >= launchTime.getTime()\r\n\r\n  if (!isLaunched) {\r\n    return (\r\n      <Page>\r\n      <FlexLayout>\r\n        <Heading as=\"h1\" size=\"lg\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n          💰 Bonds\r\n        </Heading>\r\n      </FlexLayout>\r\n        <Wrapper>\r\n          <LaunchCountdown deadline={launchTime} />\r\n        </Wrapper>\r\n      </Page>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <FlexLayout>\r\n        <Heading as=\"h1\" size=\"lg\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n          💰 Bonds\r\n        </Heading>\r\n      </FlexLayout>\r\n      <Route exact path={`${path}`}>\r\n        <BondToken />\r\n      </Route>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Bond\r\n"],"sourceRoot":""}